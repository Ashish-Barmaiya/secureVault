// components/TwoFactorAuthModal.jsx
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Image from "next/image";
import { Loader2, XCircle } from "lucide-react";
import { useDispatch, useSelector } from "react-redux";
import { toast } from "react-toastify";
import { updateUser } from "@/store/userSlice";

export default function TwoFactorAuthModal({ isOpen, onClose, onSuccess }) {
  const [step, setStep] = useState(1); // 1 = Setup, 2 = Verification
  const [qrCodeUrl, setQrCodeUrl] = useState("");
  const [verificationCode, setVerificationCode] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");

  const router = useRouter();
  const dispatch = useDispatch();
  const user = useSelector((state) => state.user.user);

  // Start 2FA setup when modal opens
  useEffect(() => {
    if (isOpen && step === 1) {
      start2FASetup();
    }
  }, [isOpen, step]);

  const start2FASetup = async () => {
    setIsLoading(true);
    setError("");
    try {
      const response = await fetch("/api/auth/2fa/setup", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
        },
      });

      const data = await response.json();

      if (response.ok) {
        setQrCodeUrl(data.qrCodeUrl);
      } else {
        setError(data.message || "Failed to start 2FA setup");
      }
    } catch (err) {
      setError("An error occurred while setting up 2FA");
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  const verify2FACode = async () => {
    if (!verificationCode || verificationCode.length !== 6) {
      setError("Please enter a 6-digit code");
      return;
    }

    setIsLoading(true);
    setError("");

    try {
      const response = await fetch("/api/auth/2fa/verify", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
        },
        body: JSON.stringify({ token: verificationCode }),
      });

      const data = await response.json();

      if (response.ok) {
        // Update redux state
        dispatch(updateUser({ twoFactorEnabled: true }));

        // Show toast notification
        toast.success("Two-Factor Authentication enabled successfully!");

        // Close modal after a short delay
        setTimeout(() => {
          if (onSuccess) onSuccess();
          onClose();
        }, 1000);
      } else {
        setError(data.message || "Invalid verification code");
      }
    } catch (err) {
      setError("An error occurred while verifying your code");
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <>
      <div className="fixed inset-0 bg-black/70 backdrop-blur-sm z-50 flex items-center justify-center p-4">
        <div className="bg-white rounded-2xl shadow-xl w-full max-w-md overflow-hidden border border-gray-100">
          <div className="p-6">
            {step === 1 && (
              <>
                <h2 className="text-2xl tracking-tight font-bold text-gray-900 text-center mb-1 pt-2">
                  Set Up Two-Factor Authentication
                </h2>

                {isLoading ? (
                  <div className="flex flex-col items-center justify-center py-8">
                    <Loader2 className="h-12 w-12 text-blue-600 animate-spin mb-4" />
                    <p>Setting up 2FA...</p>
                  </div>
                ) : error ? (
                  <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
                    <div className="flex items-center">
                      <XCircle className="h-5 w-5 text-red-500 mr-2" />
                      <p className="text-red-700">{error}</p>
                    </div>
                    <button
                      onClick={start2FASetup}
                      className="mt-3 text-blue-600 hover:text-blue-800 font-medium"
                    >
                      Try Again
                    </button>
                  </div>
                ) : (
                  <>
                    <div className="bg-gray-50 text-gray-700 rounded-lg p-4 mb-6">
                      <ol className="list-decimal pl-5 space-y-2 text-sm">
                        <li>
                          Install an authenticator app like Google Authenticator
                          or Authy.
                        </li>
                        <li>Scan the QR code below with your app.</li>
                        <li>Enter the 6-digit code generated by the app.</li>
                      </ol>
                    </div>

                    <div className="flex justify-center mb-6">
                      {qrCodeUrl ? (
                        <div className="bg-white p-4 rounded-lg border border-gray-400">
                          <Image
                            src={qrCodeUrl}
                            alt="2FA QR Code"
                            width={200}
                            height={200}
                            className="mx-auto"
                          />
                        </div>
                      ) : (
                        <div className="bg-gray-200 border-2 border-dashed rounded-xl w-48 h-48 flex items-center justify-center">
                          <p className="text-gray-500 text-center px-4">
                            QR Code will appear here
                          </p>
                        </div>
                      )}
                    </div>

                    <button
                      onClick={() => setStep(2)}
                      className="w-full bg-gradient-to-r from-blue-600 to-indigo-600 text-white py-3 rounded-lg font-medium hover:from-blue-700 hover:to-indigo-700 transition-colors"
                    >
                      Continue to Verification
                    </button>
                  </>
                )}
              </>
            )}

            {step === 2 && (
              <>
                <h2 className="text-2xl tracking-tight font-bold text-gray-900 text-center mb-4">
                  Verify Two-Factor Authentication
                </h2>

                <p className="text-gray-700 mb-6 text-center">
                  Enter the 6-digit code from your authenticator app
                </p>

                <div className="mb-6">
                  <input
                    type="text"
                    inputMode="numeric"
                    pattern="\d{6}"
                    maxLength={6}
                    value={verificationCode}
                    onChange={(e) => {
                      const value = e.target.value.replace(/\D/g, "");
                      setVerificationCode(value);
                      setError("");
                    }}
                    className="w-full text-center text-gray-700 tracking-widest text-xl font-mono border-b-2 border-blue-500 focus:outline-none focus:border-blue-700 py-2"
                    placeholder="123456"
                    autoFocus
                  />
                  {error && (
                    <p className="text-red-500 text-sm mt-2 text-center">
                      {error}
                    </p>
                  )}
                </div>

                <div className="flex gap-3">
                  <button
                    onClick={() => setStep(1)}
                    className="flex-1 bg-gray-200 text-gray-800 py-3 rounded-lg font-medium hover:bg-gray-300 transition-colors"
                  >
                    Back
                  </button>
                  <button
                    onClick={verify2FACode}
                    disabled={isLoading}
                    className="flex-1 bg-gradient-to-r from-blue-600 to-indigo-600 text-white py-3 rounded-lg font-medium hover:from-blue-700 hover:to-indigo-700 transition-colors disabled:opacity-70 flex items-center justify-center"
                  >
                    {isLoading ? (
                      <>
                        <Loader2 className="h-5 w-5 mr-2 animate-spin" />
                        Verifying...
                      </>
                    ) : (
                      "Verify & Enable"
                    )}
                  </button>
                </div>
              </>
            )}

            <button
              onClick={onClose}
              className="absolute top-4 right-4 text-gray-500 hover:text-gray-700"
            >
              <XCircle className="h-6 w-6" />
            </button>
          </div>
        </div>
      </div>
    </>
  );
}
